generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["salesportal", "security"]
}

model SalCompany {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  document             String                 @unique(map: "idxsalesportalsalcompanydocument") @db.VarChar(30)
  description          String                 @db.VarChar(250)
  contactName          String?                @db.VarChar(50)
  contactPhoneNbr      String?                @db.VarChar(50)
  logoImagePath        String?                @db.VarChar(255)
  addrZipCode          String                 @db.VarChar(30)
  addrStreet           String                 @db.VarChar(255)
  addrNbr              String                 @db.VarChar(20)
  addrComplement       String?                @db.VarChar(255)
  addrDistrict         String                 @db.VarChar(255)
  addrCity             String                 @db.VarChar(255)
  toSysCode            Int?
  externalId           Int?
  isActive             Boolean                @default(true)
  blameUser            String?                @db.VarChar(100)
  createdAt            DateTime?              @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @db.Timestamptz(6)
  addrCountry          String                 @db.VarChar(50)
  addrState            String                 @db.VarChar(30)
  migrationStatus      String?                @default("finished") @db.VarChar(16)
  SalCompanyCredential SalCompanyCredential[]
  SalEmployee          SalEmployee[]
  SalOrder             SalOrder[]
  SalOrderItem         SalOrderItem[]

  @@schema("salesportal")
}

model SalCompanyCredential {
  id           Int        @id(map: "SalCredentialId_pkey") @default(autoincrement())
  salCompanyId Int
  secUserId    Int
  SalCompany   SalCompany @relation(fields: [salCompanyId], references: [id], map: "SalesPortal_salCompanyId_fkey")
  SecUser      SecUser    @relation(fields: [secUserId], references: [id], map: "SecUserId_secUserId_fkey")
  sal_employeegroupid        Int?
  scc_isactive Boolean @default(true)


  @@unique([salCompanyId, secUserId])
  @@schema("salesportal")
}

model SalOrder {
  id                         Int            @id @default(autoincrement())
  salCompanyId               Int
  date                       DateTime       @db.Timestamptz(6)
  totalValue                 Int
  adminTax                   Int
  isPaid                     Boolean
  paymentDate                DateTime?      @db.Timestamptz(6)
  isReleased                 Boolean
  releaseDate                DateTime?      @db.Timestamptz(6)
  cancelDate                 DateTime?      @db.Timestamptz(6)
  cancelUser                 String?
  isActive                   Boolean
  orderType                  OrderType
  salImportFileId            Int?
  billetFilePath             String?
  paymentTransferCode        String?
  toSysCode                  Int?
  externalId                 Int?
  blameUser                  String?
  createdAt                  DateTime?      @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime       @updatedAt @db.Timestamptz(6)
  paymentMode                PaymentMode?
  status                     OrderStatus    @default(new)
  isProcessed                Boolean        @default(false)
  processMessage             String?
  salOrderDeliveryLocationId Int?
  sal_employeegroupid        Int?
  SalCompany                 SalCompany     @relation(fields: [salCompanyId], references: [id])
  SalOrderItem               SalOrderItem[]

  @@schema("salesportal")
}

model SalOrderItem {
  id            Int         @id @default(autoincrement())
  salOrderId    Int
  salCompanyId  Int
  salEmployeeId Int
  value         Int
  externalId    Int?
  cardNumber    String?     @db.VarChar(16)
  SalCompany    SalCompany  @relation(fields: [salCompanyId], references: [id], map: "SalOrderItem_empCompanyId_fkey")
  SalOrder      SalOrder    @relation(fields: [salOrderId], references: [id], map: "SalOrderItem_orderId_fkey")
  SalEmployee   SalEmployee @relation(fields: [salEmployeeId], references: [id], map: "SalOrderItem_usrUserId_fkey")

  @@unique([salOrderId, salEmployeeId], map: "iuniqueorder")
  @@schema("salesportal")
}

model SalEmployee {
  id                 Int                 @id @default(autoincrement())
  salCompanyId       Int
  document           String?             @db.VarChar(30)
  name               String              @db.VarChar(60)
  birthDate          DateTime            @db.Timestamptz(6)
  hrID               String?             @db.VarChar(50)
  motherName         String?             @db.VarChar(60)
  dailyValue         Int?
  SalEmployeeGroupId Int?
  cardNumber         String?             @db.VarChar(100)
  addrZipCode        String?             @db.VarChar(10)
  addrStreet         String?             @db.VarChar(255)
  addrNbr            String?             @db.VarChar(30)
  addrComplement     String?             @db.VarChar(255)
  addrDistrict       String?             @db.VarChar(255)
  addrCity           String?             @db.VarChar(100)
  toSysCode          Int?
  externalId         BigInt?
  isActive           Boolean             @default(true)
  blameUser          String?             @db.VarChar(255)
  createdAt          DateTime?           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?           @default(now()) @db.Timestamptz(6)
  addrCountry        String?             @db.VarChar(30)
  addrState          String?             @db.VarChar(30)
  email              String?             @db.VarChar(100)
  phone              String?             @db.VarChar(100)
  gender             salesportal_Gender?
  userType           Int?
  SalCompany         SalCompany          @relation(fields: [salCompanyId], references: [id])
  SalOrderItem       SalOrderItem[]

  @@schema("salesportal")
}

model SecUser {
  id                    Int                    @id(map: "SecUserId_pkey") @default(autoincrement())
  name                  String                 @db.VarChar(50)
  email                 String                 @unique(map: "secuniqueindexsecuser") @db.VarChar(50)
  password              String                 @db.VarChar(255)
  document              String                 @unique(map: "secuniquedocumentsecuser") @db.VarChar(100)
  photoPath             String?                @db.VarChar(200)
  uuid                  String?                @db.Uuid
  isAdmin               Boolean
  isSalesPortal         Boolean
  isApp                 Boolean
  reset                 Boolean
  isActive              Boolean                @default(true)
  blameUser             String?                @db.VarChar(100)
  createdAt             DateTime?              @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime               @updatedAt @db.Timestamptz(6)
  lastLoginDate         DateTime?              @db.Timestamptz(6)
  code                  Decimal?               @db.Decimal(6, 0)
  externalExpoPushToken String?                @db.VarChar(50)
  newemail              String?                @db.VarChar(50)
  SalCompanyCredential  SalCompanyCredential[]

  @@schema("security")
}

enum OrderType {
  manual
  import

  @@schema("salesportal")
}

enum OrderStatus {
  new
  paid
  released
  canceled
  inconsistent
  incomplete
  migrated

  @@schema("salesportal")
}

enum PaymentMode {
  billet
  pix

  @@schema("salesportal")
}

enum salesportal_Gender {
  male
  female
  other

  @@map("Gender")
  @@schema("salesportal")
}
